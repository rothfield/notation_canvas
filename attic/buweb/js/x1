import { drawComposition } from "./canvas_renderer.js";
import { saveCompositionDebounced, loadComposition } from "./io.js";

let composition = loadComposition();
let cursorIndex = 0;

function renderComposition(comp) {
  const canvas = document.getElementById("notation-canvas");
  const ctx = canvas.getContext("2d");

  const paragraph = comp.paragraphs[0];
  const tokens = paragraph.children.map(el => {
    if (el.type === "note") return { value: el.pitch };
    if (el.type === "space") return { value: " " };
    if (el.type === "barline") return { value: "|" };
    if (el.type === "dash") return { value: "-" };
    return { value: "?" };
  });

  drawComposition(ctx, tokens, cursorIndex);
}

function updateParseTree(comp) {
  const out = document.getElementById("output-content");
  if (out) {
    out.textContent = JSON.stringify(comp, null, 2);
  }
}

function updateAndRender() {
  saveCompositionDebounced(composition); // ✅ now passes it in
  renderComposition(composition);
  updateParseTree(composition);
}

function insertCharacter(char) {
  const paragraph = composition.paragraphs[0];

  let element;
  if (char === " ") {
    element = { type: "space" };
  } else if (char === "-") {
    element = { type: "dash" };
  } else if (char === "|") {
    element = { type: "barline" };
  } else if ("S r R g G m M P d D n N".includes(char)) {
    element = { type: "note", pitch: char };
  } else {
    return;
  }

  paragraph.children.splice(cursorIndex, 0, element);
  cursorIndex++;
  updateAndRender();
}
function handleKeydown(event) {
  const max = composition.paragraphs[0].children.length;

  if (event.key === "ArrowLeft") {
    cursorIndex = Math.max(0, cursorIndex - 1);
    event.preventDefault();
  } else if (event.key === "ArrowRight") {
    cursorIndex = Math.min(max, cursorIndex + 1);
    event.preventDefault();
  } else if (event.key === "Backspace") {
    if (cursorIndex > 0) {
      composition.paragraphs[0].children.splice(cursorIndex - 1, 1);
      cursorIndex--;
      event.preventDefault();
    }
  } else {
    insertCharacter(event.key);
  }

  updateAndRender();
}


function xhandleKeydown(event) {
  if (event.key === "ArrowLeft") {
    cursorIndex = Math.max(0, cursorIndex - 1);
  } else if (event.key === "ArrowRight") {
    cursorIndex = Math.min(composition.paragraphs[0].children.length, cursorIndex + 1);
  } else if (event.key === "Backspace") {
    if (cursorIndex > 0) {
      composition.paragraphs[0].children.splice(cursorIndex - 1, 1);
      cursorIndex--;
    }
  } else {
    insertCharacter(event.key);
  }

  event.preventDefault();
}

window.addEventListener("DOMContentLoaded", () => {
  const canvas = document.getElementById("notation-canvas");
  canvas.setAttribute("tabindex", "0");
  canvas.focus();
  canvas.addEventListener("keydown", handleKeydown);

  updateAndRender(); // ✅ only after DOM is loaded
});

